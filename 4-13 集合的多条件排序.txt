/** 
 * 排序规则，按照年龄排序，若年龄相同，按照工资排序，若工资相同，按照身高排序 
 * @author Administrator 
 * 
 */  
public class TestObjectSort {  
    public static void main(String[] args) {  
        List<Student> students=new ArrayList<Student>();  
        students.add(new Student("zhangsan",45,4000,180));  
        students.add(new Student("zhangsan",76,4000,180));  
        students.add(new Student("zhangsan",99,4000,180));  
        students.add(new Student("zhangsan",21,5000,160));  

       ****************************关键代码区*********************************************   
        Collections.sort(students, new Comparator<Student>(){  
                      public int compare(Student a1, Student a2) {  
                                int x = a1.getAge() - a2.getAge();  
                                int y = a1.getSalary() - a2.getSalary();  
                                int z = a1.getHeight() - a2.getHeight();  
                          if(x==0){  
                                 if(y==0){  
                                        return z;  
                                  }  
                                return y;  
                            }  
                            return x;  
                        }  
                           
                        });  
        
       ***********************************************************************************
          
        for(Student s:students){  
            System.out.println(s.getName()+"\t"+s.getAge()+"\t"+s.getSalary()+"\t"+s.getHeight());  
        }  
    }  
}  



集合去重方式效率 ； 方式二  优于 方式一 

方式一，利用HashSet不能添加重复数据的特性 由于HashSet不能保证添加顺序，所以只能作为判断条件：

private static void removeDuplicate(List<String> list) {
    HashSet<String> set = new HashSet<String>(list.size());
    List<String> result = new ArrayList<String>(list.size());
    for (String str : list) {
        if (set.add(str)) {
            result.add(str);
        }
    }
    list.clear();
    list.addAll(result);
}



方式二，利用LinkedHashSet不能添加重复数据并能保证添加顺序的特性 ：

private static void removeDuplicate(List<String> list) {
    LinkedHashSet<String> set = new LinkedHashSet<String>(list.size());
    set.addAll(list);
    list.clear();
    list.addAll(set);
}
  